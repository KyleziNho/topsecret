import ExcelJS from 'exceljs';

export async function generateExcelModel(deal: any, inputs: any) {
  const workbook = new ExcelJS.Workbook();
  
  workbook.creator = 'DealFlow Pro';
  workbook.lastModifiedBy = 'DealFlow Pro';
  workbook.created = new Date();
  workbook.modified = new Date();

  // Debug log to check data structure
  console.log('Deal data:', deal);
  console.log('Inputs data:', inputs);

  // Create sheets in exact order
  createDisclaimerSheet(workbook);
  createAssumptionsSheet(workbook, deal, inputs);
  createDebtModelSheet(workbook, inputs);
  createOutputsSheet(workbook);
  createPLSheet(workbook, inputs);
  createCFStatementSheet(workbook, inputs);
  createNPVSheet(workbook, inputs);

  const filename = `${deal.name.replace(/\s+/g, '_')}_Model_${new Date().toISOString().split('T')[0]}.xlsx`;
  const buffer = await workbook.xlsx.writeBuffer();
  
  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  a.click();
  URL.revokeObjectURL(url);
}

function createDisclaimerSheet(workbook: ExcelJS.Workbook) {
  const sheet = workbook.addWorksheet('Disclaimer');
  
  sheet.getCell('B2').value = 'CONFIDENTIAL - FINANCIAL MODEL DISCLAIMER';
  sheet.getCell('B2').font = { bold: true, size: 16 };
  
  sheet.getCell('B4').value = 'This financial model is provided for informational purposes only.';
  sheet.getCell('B5').value = 'All projections and calculations are based on assumptions that may not reflect actual results.';
  sheet.getCell('B6').value = 'Please consult with financial advisors before making investment decisions.';
  
  sheet.getCell('B8').value = `Model generated on: ${new Date().toLocaleDateString()}`;
  sheet.getCell('B9').value = 'Generated by: DealFlow Pro';
  
  // Set column widths
  sheet.getColumn(1).width = 5;
  sheet.getColumn(2).width = 80;
}

function createAssumptionsSheet(workbook: ExcelJS.Workbook, deal: any, inputs: any) {
  const sheet = workbook.addWorksheet('Assumptions');
  
  // Set column widths
  sheet.getColumn(1).width = 5;
  sheet.getColumn(2).width = 30;
  sheet.getColumn(3).width = 15;
  sheet.getColumn(4).width = 15;
  sheet.getColumn(5).width = 15;
  sheet.getColumn(6).width = 15;
  sheet.getColumn(7).width = 20; // Column G for inputs
  sheet.getColumn(14).width = 20; // Column N for calculations
  
  // Headers
  sheet.getCell('B2').value = 'ASSUMPTIONS';
  sheet.getCell('B2').font = { bold: true, size: 16 };
  
  // Deal Information
  sheet.getCell('B4').value = 'Deal Information';
  sheet.getCell('B4').font = { bold: true, size: 12 };
  
  sheet.getCell('B5').value = 'Deal Type';
  sheet.getCell('G5').value = deal.dealType || 'Business Acquisition';
  
  sheet.getCell('B6').value = 'Sector/Industry';
  sheet.getCell('G6').value = deal.sector || 'Technology';
  
  sheet.getCell('B7').value = 'Business Model';
  sheet.getCell('G7').value = deal.businessModel || 'Manufacturing';
  
  sheet.getCell('B8').value = 'Geography';
  sheet.getCell('G8').value = deal.geography || 'United States';
  
  // Transaction inputs (Column G)
  sheet.getCell('B10').value = 'Acquisition Date';
  sheet.getCell('G10').value = new Date(deal.acquisitionDate || inputs.revenue.baseYear);
  sheet.getCell('G10').numFmt = 'dd/mm/yyyy';
  
  sheet.getCell('B11').value = 'Holding Period (months)';
  sheet.getCell('G11').value = deal.holdingPeriodMonths || inputs.exit.exitYear * 12;
  
  sheet.getCell('B12').value = 'Reporting Frequency';
  sheet.getCell('G12').value = deal.reportingFrequency || 'monthly';
  
  sheet.getCell('B13').value = 'Transaction Fees %';
  sheet.getCell('G13').value = deal.transactionFees || 0.015;
  sheet.getCell('G13').numFmt = '0.0%';
  
  sheet.getCell('B14').value = 'LTV Ratio';
  sheet.getCell('G14').value = deal.acquisitionLTV || inputs.financing.debtAmount / (inputs.financing.debtAmount + inputs.financing.equityAmount);
  sheet.getCell('G14').numFmt = '0.0%';
  
  sheet.getCell('B17').value = 'Base Interest Rate';
  sheet.getCell('G17').value = deal.baseRate || 0.01;
  sheet.getCell('G17').numFmt = '0.0%';
  
  sheet.getCell('B18').value = 'Interest Spread';
  sheet.getCell('G18').value = deal.interestRateMargin || inputs.financing.interestRate - 0.01;
  sheet.getCell('G18').numFmt = '0.0%';
  
  // Transaction calculations (Column N)
  sheet.getCell('M4').value = 'Transaction Calculations';
  sheet.getCell('M4').font = { bold: true, size: 12 };
  
  sheet.getCell('M10').value = 'Purchase Price';
  sheet.getCell('N10').value = parseFloat(deal.dealSize || deal.purchasePrice || '0') * 1000000;
  sheet.getCell('N10').numFmt = '$#,##0';
  
  sheet.getCell('M11').value = 'Transaction Fees';
  sheet.getCell('N11').value = { formula: '=N10*G13' };
  sheet.getCell('N11').numFmt = '$#,##0';
  
  sheet.getCell('M12').value = 'Other Costs';
  sheet.getCell('N12').value = 0;
  sheet.getCell('N12').numFmt = '$#,##0';
  
  sheet.getCell('M15').value = 'Debt Amount';
  sheet.getCell('N15').value = { formula: '=N10*G14' };
  sheet.getCell('N15').numFmt = '$#,##0';
  
  sheet.getCell('M16').value = 'Equity Amount';
  sheet.getCell('N16').value = { formula: '=N10+N11+N12-N15' };
  sheet.getCell('N16').numFmt = '$#,##0';
  
  // Operating Assumptions
  sheet.getCell('B20').value = 'Operating Assumptions';
  sheet.getCell('B20').font = { bold: true, size: 12 };
  
  sheet.getCell('B22').value = 'Revenue Growth Rate';
  sheet.getCell('G22').value = deal.revenueGrowth || inputs.revenue.growthRate;
  sheet.getCell('G22').numFmt = '0.0%';
  
  sheet.getCell('B23').value = 'COGS % of Revenue';
  sheet.getCell('G23').value = inputs.costs.cogs;
  sheet.getCell('G23').numFmt = '0.0%';
  
  sheet.getCell('B24').value = 'OpEx % of Revenue';
  sheet.getCell('G24').value = inputs.costs.opex;
  sheet.getCell('G24').numFmt = '0.0%';
  
  sheet.getCell('B25').value = 'CapEx % of Revenue';
  sheet.getCell('G25').value = inputs.costs.capex;
  sheet.getCell('G25').numFmt = '0.0%';
  
  sheet.getCell('B27').value = 'Tax Rate';
  sheet.getCell('G27').value = 0.25;
  sheet.getCell('G27').numFmt = '0.0%';
  
  // Cost Items
  sheet.getCell('B29').value = 'Annual Cost Items';
  sheet.getCell('B29').font = { bold: true, size: 12 };
  
  sheet.getCell('B31').value = 'Staff Expenses';
  sheet.getCell('G31').value = deal.staffExpenses || 60000;
  sheet.getCell('G31').numFmt = '$#,##0';
  
  sheet.getCell('B32').value = 'Salary Growth (p.a.)';
  sheet.getCell('G32').value = deal.salaryGrowth || 0.005;
  sheet.getCell('G32').numFmt = '0.0%';
  
  // Add other cost items
  let rowNum = 34;
  if (deal.costItems && deal.costItems.length > 0) {
    deal.costItems.forEach((item: any, index: number) => {
      sheet.getCell(`B${rowNum + index}`).value = item.name || `Cost Item ${index + 1}`;
      sheet.getCell(`G${rowNum + index}`).value = item.amount || 0;
      sheet.getCell(`G${rowNum + index}`).numFmt = '$#,##0';
    });
    rowNum += deal.costItems.length;
  }
  
  // Exit Assumptions
  rowNum += 2;
  sheet.getCell(`B${rowNum}`).value = 'Exit Assumptions';
  sheet.getCell(`B${rowNum}`).font = { bold: true, size: 12 };
  
  sheet.getCell(`B${rowNum + 2}`).value = 'Disposal Costs %';
  sheet.getCell(`G${rowNum + 2}`).value = deal.disposalCosts || 0.005;
  sheet.getCell(`G${rowNum + 2}`).numFmt = '0.0%';
  
  sheet.getCell(`B${rowNum + 3}`).value = 'Terminal Multiple';
  sheet.getCell(`G${rowNum + 3}`).value = deal.terminalMultiple || inputs.exit.exitMultiple;
  sheet.getCell(`G${rowNum + 3}`).numFmt = '0.0x';
  
  // Revenue Base
  sheet.getCell('M20').value = 'Revenue Base';
  sheet.getCell('M20').font = { bold: true, size: 12 };
  
  sheet.getCell('M22').value = 'Year 0 Revenue';
  sheet.getCell('N22').value = inputs.revenue.baseRevenue * 1000000;
  sheet.getCell('N22').numFmt = '$#,##0';
}

function createDebtModelSheet(workbook: ExcelJS.Workbook, inputs: any) {
  const sheet = workbook.addWorksheet('Debt Model');
  
  sheet.getColumn(1).width = 5;
  sheet.getColumn(2).width = 25;
  for (let i = 3; i <= 52; i++) {
    sheet.getColumn(i).width = 12;
  }
  
  sheet.getCell('B1').value = 'DEBT MODEL';
  sheet.getCell('B1').font = { bold: true, size: 16 };
  
  // Headers
  sheet.getCell('B3').value = 'Period End Date';
  sheet.getCell('B4').value = 'Period';
  sheet.getCell('B6').value = 'All-in Interest Rate';
  sheet.getCell('B8').value = 'Opening Balance';
  sheet.getCell('B9').value = 'Drawdown';
  sheet.getCell('B10').value = 'Interest';
  sheet.getCell('B11').value = 'Repayment';
  sheet.getCell('B12').value = 'Closing Balance';
  
  // Set up periods based on holding period and reporting frequency
  const isMonthly = inputs.reportingFrequency === 'monthly';
  const holdingPeriodMonths = inputs.holdingPeriodMonths || deal.holdingPeriodMonths || inputs.exit?.exitYear * 12 || 24;
  const numPeriods = isMonthly ? holdingPeriodMonths : Math.ceil(holdingPeriodMonths / 12);
  
  // Period 0 (acquisition)
  sheet.getCell('C3').value = { formula: '=Assumptions!G10' };
  sheet.getCell('C3').numFmt = 'mmm-yy';
  sheet.getCell('C4').value = 0;
  
  // Create periods
  for (let i = 1; i <= numPeriods; i++) {
    const col = String.fromCharCode(67 + i); // D, E, F, etc.
    
    // Date
    const monthsToAdd = isMonthly ? 1 : 12;
    sheet.getCell(`${col}3`).value = { formula: `=EDATE(${String.fromCharCode(66 + i)}3,${monthsToAdd})` };
    sheet.getCell(`${col}3`).numFmt = 'mmm-yy';
    
    // Period number
    sheet.getCell(`${col}4`).value = i;
  }
  
  // Interest rate (constant across all periods)
  for (let i = 0; i <= numPeriods; i++) {
    const col = String.fromCharCode(67 + i);
    sheet.getCell(`${col}6`).value = { formula: '=Assumptions!G17+Assumptions!G18' };
    sheet.getCell(`${col}6`).numFmt = '0.00%';
  }
  
  // Debt calculations
  // Period 0 - Initial drawdown
  sheet.getCell('C8').value = 0;
  sheet.getCell('C9').value = { formula: '=Assumptions!N15' };
  sheet.getCell('C10').value = 0;
  sheet.getCell('C11').value = 0;
  sheet.getCell('C12').value = { formula: '=C8+C9-C10-C11' };
  
  // Subsequent periods
  const periodsPerYear = isMonthly ? 12 : 1;
  for (let i = 1; i <= numPeriods; i++) {
    const col = String.fromCharCode(67 + i);
    const prevCol = String.fromCharCode(66 + i);
    
    sheet.getCell(`${col}8`).value = { formula: `=${prevCol}12` };
    sheet.getCell(`${col}9`).value = 0;
    sheet.getCell(`${col}10`).value = { formula: `=${col}8*${col}6/${periodsPerYear}` };
    sheet.getCell(`${col}11`).value = i === numPeriods ? { formula: `=${col}8` } : 0;
    sheet.getCell(`${col}12`).value = { formula: `=${col}8+${col}9-${col}10-${col}11` };
  }
  
  // Format numbers
  for (let row = 8; row <= 12; row++) {
    for (let i = 0; i <= numPeriods; i++) {
      const col = String.fromCharCode(67 + i);
      sheet.getCell(`${col}${row}`).numFmt = '$#,##0';
    }
  }
}

function createOutputsSheet(workbook: ExcelJS.Workbook) {
  const sheet = workbook.addWorksheet('Outputs');
  
  sheet.getColumn(1).width = 5;
  sheet.getColumn(2).width = 25;
  sheet.getColumn(3).width = 20;
  
  sheet.getCell('B1').value = 'KEY OUTPUTS';
  sheet.getCell('B1').font = { bold: true, size: 16 };
  
  sheet.getCell('B3').value = 'Unlevered IRR';
  sheet.getCell('C3').value = { formula: "='CF Statement'!E21" };
  sheet.getCell('C3').numFmt = '0.0%';
  
  sheet.getCell('B4').value = 'Levered IRR';
  sheet.getCell('C4').value = { formula: "='CF Statement'!E22" };
  sheet.getCell('C4').numFmt = '0.0%';
  
  sheet.getCell('B5').value = 'MOIC';
  sheet.getCell('C5').value = { formula: "='CF Statement'!E23" };
  sheet.getCell('C5').numFmt = '0.00x';
  
  sheet.getCell('B7').value = 'Investment Summary';
  sheet.getCell('B7').font = { bold: true };
  
  sheet.getCell('B8').value = 'Total Equity Invested';
  sheet.getCell('C8').value = { formula: '=Assumptions!N16' };
  sheet.getCell('C8').numFmt = '$#,##0';
  
  sheet.getCell('B9').value = 'Total Debt';
  sheet.getCell('C9').value = { formula: '=Assumptions!N15' };
  sheet.getCell('C9').numFmt = '$#,##0';
  
  sheet.getCell('B10').value = 'Purchase Price';
  sheet.getCell('C10').value = { formula: '=Assumptions!N10' };
  sheet.getCell('C10').numFmt = '$#,##0';
}

function createPLSheet(workbook: ExcelJS.Workbook, inputs: any) {
  const sheet = workbook.addWorksheet('P&L');
  
  sheet.getColumn(1).width = 5;
  sheet.getColumn(2).width = 25;
  for (let i = 3; i <= 52; i++) {
    sheet.getColumn(i).width = 12;
  }
  
  sheet.getCell('B1').value = 'PROFIT & LOSS STATEMENT';
  sheet.getCell('B1').font = { bold: true, size: 16 };
  
  const isMonthly = inputs.reportingFrequency === 'monthly';
  const holdingPeriodMonths = inputs.holdingPeriodMonths || inputs.exit?.exitYear * 12 || 24;
  const holdingPeriod = isMonthly ? holdingPeriodMonths : Math.ceil(holdingPeriodMonths / 12);
  
  // Headers
  sheet.getCell('B5').value = 'Period End Date';
  sheet.getCell('B6').value = 'Period';
  
  // Period 0
  sheet.getCell('D5').value = { formula: '=Assumptions!G10' };
  sheet.getCell('D5').numFmt = 'mmm-yy';
  sheet.getCell('D6').value = 0;
  
  // Periods
  for (let i = 1; i <= holdingPeriod; i++) {
    const col = String.fromCharCode(68 + i); // E, F, G, etc.
    
    const monthsToAdd = isMonthly ? 1 : 12;
    sheet.getCell(`${col}5`).value = { formula: `=EDATE(${String.fromCharCode(67 + i)}5,${monthsToAdd})` };
    sheet.getCell(`${col}5`).numFmt = 'mmm-yy';
    sheet.getCell(`${col}6`).value = i;
  }
  
  // Revenue section
  sheet.getCell('B7').value = 'Revenue';
  sheet.getCell('B7').font = { bold: true };
  
  sheet.getCell('B8').value = isMonthly ? 'Monthly Revenue' : 'Annual Revenue';
  const revenueDivisor = isMonthly ? 12 : 1;
  sheet.getCell('D8').value = { formula: `=Assumptions!N22/${revenueDivisor}` };
  
  for (let i = 1; i <= holdingPeriod; i++) {
    const col = String.fromCharCode(68 + i);
    const prevCol = String.fromCharCode(67 + i);
    
    // Apply growth rate based on reporting frequency
    const growthDivisor = isMonthly ? 12 : 1;
    sheet.getCell(`${col}8`).value = { 
      formula: `=${prevCol}8*(1+Assumptions!G22/${growthDivisor})` 
    };
  }
  
  sheet.getCell('B9').value = 'Total Revenue';
  for (let i = 0; i <= holdingPeriod; i++) {
    const col = String.fromCharCode(68 + i);
    sheet.getCell(`${col}9`).value = { formula: `=${col}8` };
  }
  
  // Costs section
  sheet.getCell('B11').value = 'Operating Costs';
  sheet.getCell('B11').font = { bold: true };
  
  sheet.getCell('B12').value = 'COGS';
  sheet.getCell('B13').value = 'Gross Profit';
  sheet.getCell('B15').value = 'Operating Expenses';
  sheet.getCell('B16').value = 'Other Costs';
  sheet.getCell('B17').value = 'Total OpEx';
  
  for (let i = 0; i <= holdingPeriod; i++) {
    const col = String.fromCharCode(68 + i);
    
    sheet.getCell(`${col}12`).value = { formula: `=-${col}9*Assumptions!G23` };
    sheet.getCell(`${col}13`).value = { formula: `=${col}9+${col}12` };
    sheet.getCell(`${col}15`).value = { formula: `=-${col}9*Assumptions!G24` };
    sheet.getCell(`${col}16`).value = 0;
    sheet.getCell(`${col}17`).value = { formula: `=${col}15+${col}16` };
  }
  
  // EBITDA
  sheet.getCell('B19').value = 'EBITDA';
  sheet.getCell('B19').font = { bold: true };
  
  for (let i = 0; i <= holdingPeriod; i++) {
    const col = String.fromCharCode(68 + i);
    sheet.getCell(`${col}19`).value = { formula: `=${col}13+${col}17` };
  }
  
  // Below EBITDA items
  sheet.getCell('B21').value = 'Interest Expense';
  sheet.getCell('B22').value = 'EBT';
  sheet.getCell('B23').value = 'Tax';
  sheet.getCell('B24').value = 'Net Income';
  
  for (let i = 0; i <= holdingPeriod; i++) {
    const col = String.fromCharCode(68 + i);
    
    sheet.getCell(`${col}21`).value = { formula: `=-'Debt Model'!${col}10` };
    sheet.getCell(`${col}22`).value = { formula: `=${col}19+${col}21` };
    sheet.getCell(`${col}23`).value = { formula: `=MIN(0,-${col}22*Assumptions!G27)` };
    sheet.getCell(`${col}24`).value = { formula: `=${col}22+${col}23` };
  }
  
  // EBITDA row 27 for CF Statement reference
  sheet.getCell('B27').value = 'EBITDA (for CF)';
  for (let i = 0; i <= holdingPeriod; i++) {
    const col = String.fromCharCode(68 + i);
    sheet.getCell(`${col}27`).value = { formula: `=${col}19` };
  }
  
  // Format numbers
  for (let row = 8; row <= 27; row++) {
    if (row === 10 || row === 11 || row === 18 || row === 20 || row === 25 || row === 26) continue;
    for (let i = 0; i <= holdingPeriod; i++) {
      const col = String.fromCharCode(68 + i);
      sheet.getCell(`${col}${row}`).numFmt = '$#,##0';
    }
  }
}

function createCFStatementSheet(workbook: ExcelJS.Workbook, inputs: any) {
  const sheet = workbook.addWorksheet('CF Statement');
  
  sheet.getColumn(1).width = 5;
  sheet.getColumn(2).width = 25;
  for (let i = 3; i <= 52; i++) {
    sheet.getColumn(i).width = 12;
  }
  
  sheet.getCell('B1').value = 'CASH FLOW STATEMENT';
  sheet.getCell('B1').font = { bold: true, size: 16 };
  
  const isMonthly = inputs.reportingFrequency === 'monthly';
  const holdingPeriodMonths = inputs.holdingPeriodMonths || inputs.exit?.exitYear * 12 || 24;
  const holdingPeriod = isMonthly ? holdingPeriodMonths : Math.ceil(holdingPeriodMonths / 12);
  
  // Unlevered Cash Flows
  sheet.getCell('B3').value = 'Unlevered Cash Flows';
  sheet.getCell('B3').font = { bold: true };
  
  sheet.getCell('B5').value = 'Purchase Price';
  sheet.getCell('B6').value = 'Transaction Costs';
  sheet.getCell('B7').value = 'EBITDA';
  sheet.getCell('B8').value = 'Tax on EBITDA';
  sheet.getCell('B9').value = 'CapEx';
  sheet.getCell('B10').value = 'Unlevered Cashflows';
  
  // Period 0 - Acquisition
  sheet.getCell('D5').value = { formula: '=-Assumptions!N10' };
  sheet.getCell('D6').value = { formula: '=-Assumptions!N11' };
  sheet.getCell('D7').value = 0;
  sheet.getCell('D8').value = 0;
  sheet.getCell('D9').value = 0;
  sheet.getCell('D10').value = { formula: '=SUM(D5:D9)' };
  
  // Operating periods
  for (let i = 1; i <= holdingPeriod; i++) {
    const col = String.fromCharCode(68 + i);
    
    sheet.getCell(`${col}5`).value = 0;
    sheet.getCell(`${col}6`).value = 0;
    sheet.getCell(`${col}7`).value = { formula: `='P&L'!${col}27` };
    sheet.getCell(`${col}8`).value = { formula: `=-${col}7*Assumptions!G27` };
    sheet.getCell(`${col}9`).value = { formula: `=-'P&L'!${col}9*Assumptions!G25` };
    sheet.getCell(`${col}10`).value = { formula: `=SUM(${col}5:${col}9)` };
  }
  
  // Exit proceeds in last period
  const exitCol = String.fromCharCode(68 + holdingPeriod);
  sheet.getCell(`${exitCol}5`).value = { 
    formula: `='P&L'!${exitCol}27*12*Assumptions!G32` 
  };
  
  // Levered Cash Flows
  sheet.getCell('B12').value = 'Levered Cash Flows';
  sheet.getCell('B12').font = { bold: true };
  
  sheet.getCell('B14').value = 'Debt Drawdown';
  sheet.getCell('B15').value = 'Debt Interest';
  sheet.getCell('B16').value = 'Debt Repayment';
  sheet.getCell('B17').value = 'Tax Shield on Interest';
  sheet.getCell('B18').value = 'Levered Cashflows';
  
  // Period 0
  sheet.getCell('D14').value = { formula: "='Debt Model'!C9" };
  sheet.getCell('D15').value = 0;
  sheet.getCell('D16').value = 0;
  sheet.getCell('D17').value = 0;
  sheet.getCell('D18').value = { formula: '=D10+D14+D15+D16+D17' };
  
  // Operating periods
  for (let i = 1; i <= holdingPeriod; i++) {
    const col = String.fromCharCode(68 + i);
    
    sheet.getCell(`${col}14`).value = { formula: `='Debt Model'!${col}9` };
    sheet.getCell(`${col}15`).value = { formula: `=-'Debt Model'!${col}10` };
    sheet.getCell(`${col}16`).value = { formula: `=-'Debt Model'!${col}11` };
    sheet.getCell(`${col}17`).value = { formula: `=-${col}15*Assumptions!G27` };
    sheet.getCell(`${col}18`).value = { formula: `=${col}10+${col}14+${col}15+${col}16+${col}17` };
  }
  
  // IRR and MOIC calculations
  sheet.getCell('B20').value = 'Returns';
  sheet.getCell('B20').font = { bold: true };
  
  sheet.getCell('B21').value = 'Unlevered IRR';
  sheet.getCell('E21').value = { formula: `=IRR(D10:${exitCol}10)` };
  sheet.getCell('E21').numFmt = '0.0%';
  
  sheet.getCell('B22').value = 'Levered IRR';
  sheet.getCell('E22').value = { formula: `=IRR(D18:${exitCol}18)` };
  sheet.getCell('E22').numFmt = '0.0%';
  
  sheet.getCell('B23').value = 'MOIC';
  sheet.getCell('E23').value = { formula: `=-SUMPRODUCT(E18:${exitCol}18)/D16` };
  sheet.getCell('E23').numFmt = '0.00x';
  
  // Note about D16 reference for MOIC - this should be the initial equity investment
  // Update MOIC formula to reference correct cell
  sheet.getCell('E23').value = { formula: `=SUMPRODUCT(E18:${exitCol}18)/-D18` };
  
  // Format numbers
  for (let row = 5; row <= 18; row++) {
    if (row === 11 || row === 12 || row === 13 || row === 19 || row === 20) continue;
    for (let i = 0; i <= holdingPeriod; i++) {
      const col = String.fromCharCode(68 + i);
      sheet.getCell(`${col}${row}`).numFmt = '$#,##0';
    }
  }
}

function createNPVSheet(workbook: ExcelJS.Workbook, inputs: any) {
  const sheet = workbook.addWorksheet('NPV');
  
  sheet.getColumn(1).width = 5;
  sheet.getColumn(2).width = 30;
  sheet.getColumn(3).width = 20;
  
  sheet.getCell('B1').value = 'NET PRESENT VALUE ANALYSIS';
  sheet.getCell('B1').font = { bold: true, size: 16 };
  
  sheet.getCell('B3').value = 'Discount Rate Assumptions';
  sheet.getCell('B3').font = { bold: true };
  
  sheet.getCell('B5').value = 'Risk-Free Rate';
  sheet.getCell('C5').value = 0.03;
  sheet.getCell('C5').numFmt = '0.0%';
  
  sheet.getCell('B6').value = 'Market Risk Premium';
  sheet.getCell('C6').value = 0.08;
  sheet.getCell('C6').numFmt = '0.0%';
  
  sheet.getCell('B7').value = 'Beta';
  sheet.getCell('C7').value = 1.2;
  sheet.getCell('C7').numFmt = '0.00';
  
  sheet.getCell('B8').value = 'Cost of Equity (CAPM)';
  sheet.getCell('C8').value = { formula: '=C5+C7*C6' };
  sheet.getCell('C8').numFmt = '0.0%';
  
  sheet.getCell('B10').value = 'NPV Analysis';
  sheet.getCell('B10').font = { bold: true };
  
  const isMonthly = inputs.reportingFrequency === 'monthly';
  const holdingPeriodMonths = inputs.holdingPeriodMonths || inputs.exit?.exitYear * 12 || 24;
  const holdingPeriod = isMonthly ? holdingPeriodMonths : Math.ceil(holdingPeriodMonths / 12);
  const exitCol = String.fromCharCode(68 + holdingPeriod);
  
  sheet.getCell('B12').value = 'NPV (Unlevered)';
  sheet.getCell('C12').value = { 
    formula: `=NPV(C8/12,'CF Statement'!E10:${exitCol}10)+'CF Statement'!D10` 
  };
  sheet.getCell('C12').numFmt = '$#,##0';
  
  sheet.getCell('B13').value = 'NPV (Levered)';
  sheet.getCell('C13').value = { 
    formula: `=NPV(C8/12,'CF Statement'!E18:${exitCol}18)+'CF Statement'!D18` 
  };
  sheet.getCell('C13').numFmt = '$#,##0';
  
  sheet.getCell('B15').value = 'Sensitivity Analysis';
  sheet.getCell('B15').font = { bold: true };
  
  sheet.getCell('B17').value = 'Exit Multiple Sensitivity';
  sheet.getCell('B18').value = 'Multiple';
  sheet.getCell('C18').value = 'IRR';
  
  // Simple sensitivity table
  const multiples = [10, 11, 12, 13, 14];
  for (let i = 0; i < multiples.length; i++) {
    sheet.getCell(`B${19 + i}`).value = multiples[i];
    sheet.getCell(`B${19 + i}`).numFmt = '0.0x';
    
    // This would need more complex implementation for actual sensitivity
    sheet.getCell(`C${19 + i}`).value = { 
      formula: `='CF Statement'!E22` 
    };
    sheet.getCell(`C${19 + i}`).numFmt = '0.0%';
  }
}